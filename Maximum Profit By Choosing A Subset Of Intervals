class Solution {
  public:
   static bool comp(vector<int> &a, vector<int> &b) {
        return a[0] < b[0];
    }
    
    int upper_bound(vector<vector<int>> &v, int x) {
        int l = 0, h = v.size()-1;
        int ans = v.size();
        
        while(l <= h) {
            int mid = (l+h)/2;
            if(v[mid][0] < x) {
                l = mid+1;
            }
            else {
                h = mid-1;
                ans = min(ans,mid);
            }
        }
        return ans;
    }
    
    int maximum_profit(int n, vector<vector<int>> &v) {
        sort(v.begin(),v.end(),comp);
        vector<int> dp(n,-1);
        
        for(int i = n-1; i >= 0; i--) {
            int ind = upper_bound(v,v[i][1]);
            
            if(ind >= n) dp[i] = v[i][2];
            else dp[i] = v[i][2] + dp[ind];
            
            if(i != n-1) dp[i] = max(dp[i],dp[i+1]);
        }
        
        return dp[0];
    }
};
